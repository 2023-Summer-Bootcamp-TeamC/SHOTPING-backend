version: "3"
services:
  node-service:
    container_name: node-service
    build: ./shotping_node
    restart: always
    ports:
      - 8080:8080
    volumes:
      - ./shotping_node:/usr/src/app
      - ./logs:/usr/src/app/logs
    environment:
      - MYSQL_HOST=${MYSQL_HOST}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - DB_PORT=${DB_PORT}
      - ACCESS_KEY=${ACCESS_KEY}
      - SECRET_ACCESS_KEY=${SECRET_ACCESS_KEY}
    command: npm run dev

  flask-service:
    container_name: flask-service
    build: ./shotping_flask
    restart: always
    ports:
      - 5001:5000
    volumes:
      - ./shotping_flask:/app
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
    command: gunicorn -b :5000 app:app

  nginx:
    build:
      context: ./nginx
    container_name: nginx
    ports:
      - 80:80
      - 443:443 #https에 대한 포트설정
    volumes:
      - build_folder:/var/www/shotping #depends_on:  - backend- frontend가 아래에 추가되어야 함 현재는 설정이 아예 안되어있음
    restart: always

  rabbitmq:
    container_name: rabbitmq
    image: "rabbitmq:3-management"
    hostname: "rabbitmq"
    restart: unless-stopped # 컨테이너 종료시 (재시작여부) 종료 코드와 상관없이 컨테이너가 다시시작하지만 서비스가 중지되거나 제거되면 다시 시작을 중지
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    ports:
      - 5672:5672 #rabbitmq AMQP 기본 포트 번호
      - 15672:15672 #Rabbitmq web

  celery:
    container_name: celery
    build: ./shotping_flask
    volumes:
      - ./shotping_flask:/code
    depends_on:
      - rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
    command: celery -A tasks worker --loglevel=info --pool=threads

  prometheus:
    container_name: prometheus
    image: prom/prometheus
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
    ports:
      - 9090:9090

  cadvisor:
    container_name: cadvisor
    image: zcube/cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - 8081:8080

  grafana:
    container_name: grafana
    image: grafana/grafana
    ports:
      - 3000:3000
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus

  node-exporter:
    container_name: node-exporter
    image: prom/node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - "--path.procfs=/host/proc"
      - "--path.sysfs=/host/sys"
      - "--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)"
    ports:
      - 9100:9100

  alertmanager:
    container_name: alertmanager
    image: prom/alertmanager
    volumes:
      - ./alertmanager:/etc/alertmanager
    ports:
      - 9093:9093
    depends_on:
      - prometheus

  elasticsearch:
    container_name: elasticsearch
    build:
      context: ./elk/elasticsearch
      args: 
        ELASTIC_VERSION: 8.8.2
    volumes:
      - ./elk/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,Z
      - elasticsearch:/usr/share/elasticsearch/data:Z
    ports:
      - 9200:9200
      - 9300:9300
    environment:
      node.name: elasticsearch
      ES_JAVA_OPTS: -Xms256m -Xmx256m
      # Bootstrap password.
      # Used to initialize the keystore during the initial startup of
      # Elasticsearch. Ignored on subsequent runs.
      ELASTIC_PASSWORD: changeme
      # Use single node discovery in order to disable production mode and avoid bootstrap checks.
      # see: https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
      discovery.type: single-node
    restart: unless-stopped
    mem_limit: 512m

  logstash:
    container_name: logstash
    build:
      context: ./elk/logstash
      args:
        ELASTIC_VERSION: 8.8.2
    volumes:
      - ./elk/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro,Z
      - ./elk/logstash/pipeline:/usr/share/logstash/pipeline:ro,Z
    ports:
      - 5044:5044
      - 50000:50000/tcp
      - 50000:50000/udp
      - 9600:9600
    environment:
      LS_JAVA_OPTS: -Xms256m -Xmx256m
      LOGSTASH_INTERNAL_PASSWORD: changeme
    depends_on:
      - elasticsearch
    restart: unless-stopped
    mem_limit: 512m

  kibana:
    container_name: kibana
    build:
      context: ./elk/kibana
      args:
        ELASTIC_VERSION: 8.8.2
    volumes:
      - ./elk/kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro,Z
    ports:
      - 5601:5601
    environment:
      KIBANA_SYSTEM_PASSWORD: changeme
    depends_on:
      - elasticsearch
    restart: unless-stopped
    mem_limit: 512m


  filebeat:
    container_name: filebeat
    build:
      context: ./elk/filebeat
      args:
        ELASTIC_VERSION: 8.8.2
    entrypoint: "filebeat -e -strict.perms=false"
    volumes:
      - ./elk/filebeat/config/filebeat.yml:/usr/share/filebeat/filebeat.yml
      - ./logs:/usr/share/filebeat/logs
    depends_on:
      - logstash
      - elasticsearch
      - kibana
    mem_limit: 512m


volumes:
  prometheus_data: {}
  grafana_data: {}
  build_folder:
  elasticsearch:
